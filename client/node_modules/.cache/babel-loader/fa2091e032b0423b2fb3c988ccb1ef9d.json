{"ast":null,"code":"var _s = $RefreshSig$();\n\n// hook for server interaction -> request if loading or potential mistakes\nimport { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  _s();\n\n  // inside the hook, we determine whether something is loaded (or find error) or not\n  const [loadind, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setLoading(true);\n\n    if (body) {\n      body = JSON.stringify(body);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json(); // parsing in json\n\n      if (!response.ok) {\n        // if the request contains an error\n        throw new Error(data.message || 'Something went wrong');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []); // clear errors\n\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loadind,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"lXL96t47lsf+EsnGwPJLXeDVpCQ=\");","map":{"version":3,"sources":["C:/Users/User/newProjects/example-create-react-app-express/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loadind","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","e","clearError"],"mappings":";;AAAA;AACA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMO,OAAO,GAAGN,WAAW,CAAC,gBAAMO,GAAN,EAAyD;AAAA,QAA9CC,MAA8C,uEAArC,KAAqC;AAAA,QAA9BC,IAA8B,uEAAvB,IAAuB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AACjFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAIM,IAAJ,EAAU;AACNA,MAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AACD,QAAI;AACA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAOF,QAAQ,CAACG,IAAT,EAApB,CAFA,CAEuC;;AAEvC,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAiB;AAAG;AAChB,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,sBAA1B,CAAN;AACH;;AAEDhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOY,IAAP;AACH,KAVD,CAUC,OAAOK,CAAP,EAAU;AACPjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACe,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACH;AACJ,GArB0B,EAqBxB,EArBwB,CAA3B,CAJyB,CA2BzB;;AACA,QAAMC,UAAU,GAAGrB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBF,IAAAA,KAApB;AAA2BiB,IAAAA;AAA3B,GAAP;AACH,CA/BM;;GAAMpB,O","sourcesContent":["// hook for server interaction -> request if loading or potential mistakes\r\nimport {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    // inside the hook, we determine whether something is loaded (or find error) or not\r\n    const [loadind, setLoading] = useState(false )\r\n    const [error, setError] = useState(null)\r\n    const request = useCallback(async(url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        if (body) {\r\n            body = JSON.stringify(body)\r\n            headers['Content-Type'] = 'application/json'\r\n        }\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n            const data = await  response.json()    // parsing in json\r\n\r\n            if(!response.ok) {  // if the request contains an error\r\n                throw new Error(data.message || 'Something went wrong')\r\n            }\r\n\r\n            setLoading(false)\r\n            return data\r\n        }catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    // clear errors\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loadind, request, error, clearError }\r\n}"]},"metadata":{},"sourceType":"module"}